#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('node-express:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

const io = require('socket.io')(server);

io.on('connection', (socket) => {
  console.log('a user connected');
  socket.on('users', () => {
    //console.log('heard user update');
    //io.emit('users', 'sup');
    io.emit('users');
  })
  socket.on('timer', (time) => {
    //console.log('heard timer update');
    //io.emit('timer', 'sup');
    console.log(time);
    io.emit('timer', time*60);
  })
  socket.on('leaderboard', () => {
    //console.log('heard leaderboard update');
    io.emit('leaderboard');
  })
  socket.on('services', () => {
    //console.log('heard services update');
    io.emit('services');
  })
  socket.on('yes', () => {
    //console.log('heard yes update');
    io.emit('yes');
  })
  socket.on('no', () => {
    //console.log('heard no update');
    io.emit('no');
  })
  socket.on('next-movie', () => {
    //console.log('heard next-movie update');
    io.emit('next-movie');
  })
  socket.on('results', () => {
    //console.log('heard results update');
    io.emit('results');
  })
  socket.on('wait', () => {
    console.log('please wait 5 seconds -- someone just requested from Imdb8 API');
    io.emit('wait');
  })
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
